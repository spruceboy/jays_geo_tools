#!/usr/bin/env ruby

require 'yaml'
require 'pp'

def runner ( command, opts)
  puts("Running: #{command.join(" ")}") if (opts[:verbrose])
  start_time = Time.now
  system(*command)
  puts("Done in #{(Time.now - start_time)/60.0}m.") if (opts[:verbrose])
end


## Command line parsing action..
require 'trollop'
parser = Trollop::Parser.new do
  version "0.0.1 jay@alaska.edu"
  banner <<-EOS
This util takes a file and remakes it as a tiled tif, compressed tiff, with overviews. 

It assumes the nodata values are 0 for each band.

Usage:
      reformate.rb [options] <infile>
where [options] is:
EOS

  opt :compress, "compression_mode", :default => "deflate"
  opt :verbrose, "Maxium Verbrosity.", :short => "V"
  opt :skip_cache_check, "Skip check of GDAL_CACHEMAX"
  opt :save, "Save original."
  opt :small_tiff, "Don't use bigtiff option (not implemented yet) - placeholder."
end

opts = Trollop::with_standard_exception_handling(parser) do
  o = parser.parse ARGV
  raise Trollop::HelpNeeded if ARGV.length == 0 # show help screen
  o
end


if (!opts[:skip_cache_check] )
  if (!ENV["GDAL_CACHEMAX"])
      puts("Error: Please set GDAL_CACHEMAX to something useful by doing something like this \"export GDAL_CACHEMAX=2048\" and try again. ")
      puts("(This check can be skipped by using the \"--skip_cache_check\" flag)")
      exit(-1)
  else
    puts("Warning: GDAL_CACHEMAX is set to somthing pretty small #{ENV["GDAL_CACHEMAX"].to_i} (thats in mbytes)") if (ENV["GDAL_CACHEMAX"].to_i < 512)
  end
end


# first, verify that the required subprograms exist..
errors=false;
["add_overviews"].each do |t|
  if (!File.exists?(File.dirname(__FILE__) +"/" + t))
      errors=true
      puts("Error: Could not find #{t}, which should be here: #{File.dirname(__FILE__)}")
  end
end
exit(-1) if (errors)
  


ARGV.each do |item|

	infile = item
	tmpfile = item +".tmp"

	puts("Info: using \"#{infile}\" as source ") if (opts[:verbrose])
	puts("Info: using \"#{tmpfile}\" as tmp output ") if (opts[:verbrose])

	#make temp image, compressed + tiled
	puts("Info: generating temp image..")
	runner(["gdal_translate", "-a_nodata", "0 0 0",  "-co", "TILED=YES", "-co","BIGTIFF=YES","-co", "COMPRESS=#{opts[:compress]}",  infile, tmpfile ], opts)
	
	#add overviews..
	puts("Info: Adding overviews to temp image..")
	runner([File.dirname(__FILE__)+"/add_overviews", "-m",  tmpfile], opts)

	if (opts[:save])
		puts("Info: saving original..")
		runner("mv -v #{infile} #{infile}.org", opts)
	end
	runner("mv -v #{tmpfile} #{infile}", opts)

	puts("Info: Done with #{item}.")
end




